// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AsfiRequest {
  id                  String             @id @default(uuid())
  authorityPosition   String
  requestingAuthority String
  requestId           Int                @unique @default(autoincrement())
  requestCode         String             @unique
  department          String
  quantityDetail      Int
  sentDate            DateTime
  userName            String
  createdAt           DateTime           @default(now())
  circularNumber      String?
  processType         ProcessType
  file                AsfiRequestFile?
  status              RequestStatus      @default(pending)
  fundTransfers       AsfiFundTransfer[]
  user                User               @relation(fields: [userId], references: [id])
  userId              Int
  dataSheetFile       String?
  sendErrorMessage    String?
  processingStatus    String?
  circularDate        DateTime?
}

model AsfiFundTransfer {
  id                  String            @id @default(uuid())
  authorityPosition   String
  requestingAuthority String
  requestId           Int               @unique @default(autoincrement())
  requestCode         String            @unique
  department          String
  quantityDetail      Int
  sentDate            DateTime
  userName            String
  createdAt           DateTime          @default(now())
  circularNumber      String?
  asfiRequestId       String
  asfiRequest         AsfiRequest       @relation(fields: [asfiRequestId], references: [id])
  status              RequestStatus     @default(pending)
  file                AsfiTransferFile?
  user                User              @relation(fields: [userId], references: [id])
  userId              Int
  dataSheetFile       String?
  sendErrorMessage    String?
  processingStatus    String?
  circularDate        DateTime?
}

model AsfiRequestFile {
  id            Int         @id @default(autoincrement())
  fileName      String
  originalName  String
  asfiRequest   AsfiRequest @relation(fields: [asfiRequestId], references: [id], onDelete: Cascade)
  asfiRequestId String      @unique
}

model AsfiTransferFile {
  id                 Int              @id @default(autoincrement())
  fileName           String
  originalName       String
  asfiFundTransfer   AsfiFundTransfer @relation(fields: [asfiFundTransferId], references: [id], onDelete: Cascade)
  asfiFundTransferId String           @unique
}

model User {
  id                 Int                @id @default(autoincrement())
  fullName           String
  position           String
  asfiCredentials    AsfiCredentials?
  login              String             @unique
  password           String
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  roles              String[]           @default(["employee"])
  mustChangePassword Boolean            @default(false)
  asfiFundTransfer   AsfiFundTransfer[]
  asfiRequest        AsfiRequest[]
}

model AsfiCredentials {
  id           Int    @id @default(autoincrement())
  asfiUsername String
  asfiPassword String
  passwordIv   String
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
}

enum ProcessType {
  R
  S
}

enum RequestStatus {
  pending
  completed
}
